var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdvancedLayoutCalculator","category":"page"},{"location":"#AdvancedLayoutCalculator","page":"Home","title":"AdvancedLayoutCalculator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AdvancedLayoutCalculator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AdvancedLayoutCalculator, TextProcessor]","category":"page"},{"location":"#AdvancedLayoutCalculator.TextProcessor.AbstractPiece","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.AbstractPiece","text":"AbstractPiece\n\nAn abstract type representing a piece of text.\n\n\n\n\n\n","category":"type"},{"location":"#AdvancedLayoutCalculator.TextProcessor.PString","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.PString","text":"PString\n\nSpecial type of string that can keep track of things like mods (e.g., shift).\n\n\n\n\n\n","category":"type"},{"location":"#AdvancedLayoutCalculator.TextProcessor.ProcPiece","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.ProcPiece","text":"ProcPiece\n\nStores n-gram counts of a piece of text. Converts strings to PChars.\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> d = Dict(\"A\" => 10, \"e\" => 4); \n\n\n\n\n\n","category":"type"},{"location":"#AdvancedLayoutCalculator.TextProcessor.RawPiece","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.RawPiece","text":"RawPiece\n\nStores n-gram counts of a piece of text. Only accounts for raw characters.\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> d = Dict(1 => Dict(\"a\" => 10, \"e\" => 4)); \n\njulia> RawPiece(d, [15])\nERROR: For ngram (1), sum of 'counts' (14) must equal the 'total' (15)!\n\n\n\n\n\n","category":"type"},{"location":"#AdvancedLayoutCalculator.TextProcessor.RawPiece-Tuple{String, Int64}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.RawPiece","text":"RawPiece(rawtext::String, n::Int)\n\nGet RawPiece from rawtext up to n grams.\n\n\n\n\n\n","category":"method"},{"location":"#AdvancedLayoutCalculator.TextProcessor._ngram-Tuple{AbstractString, Int64}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor._ngram","text":"_ngram(::String, ::Int)\n\nhttps://stackoverflow.com/questions/42360957/generate-ngrams-with-julia\n\njulia> AdvancedLayoutCalculator.TextProcessor._ngram(\"hello Ez\", 3)\n6-element Vector{String}:\n \"hel\"\n \"ell\"\n \"llo\"\n \"lo \"\n \"o E\"\n \" Ez\"\n\n\n\n\n\n","category":"method"},{"location":"#AdvancedLayoutCalculator.TextProcessor._updatedict!-Union{Tuple{V}, Tuple{U}, Tuple{T}, Tuple{Dict{T, Dict{U, V}}, Array{var\"#s5\", N} where {var\"#s5\"<:U, N}}} where {T, U, V}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor._updatedict!","text":"_updatedict!(::Dict, ::PChar)\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> d = Dict(1 => Dict{PString, Int}(PString(\"a\") => 2));\n\njulia> AdvancedLayoutCalculator.TextProcessor._updatedict!(d, PString[:shift, \"a\", \"bd\"]);\n\njulia> d[1]\nDict{PString, Int64} with 2 entries:\n  PString(Union{AbstractString, Symbol}[:shift]) => 1\n  PString(Union{AbstractString, Symbol}[\"a\"])    => 3\n\njulia> d[2]\nDict{PString, Int64} with 1 entry:\n  PString(Union{AbstractString, Symbol}[\"b\", \"d\"]) => 1\n\n\n\n\n\n","category":"method"},{"location":"#AdvancedLayoutCalculator.TextProcessor._updatedict!-Union{Tuple{V}, Tuple{U}, Tuple{T}, Tuple{Dict{T, Dict{U, V}}, U}} where {T, U, V}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor._updatedict!","text":"_updatedict!(::Dict, ::PChar)\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> d = Dict(1 => Dict{String, Int}(\"a\" => 1));\n\njulia> AdvancedLayoutCalculator.TextProcessor._updatedict!(d, \"a\")\nDict{Int64, Dict{String, Int64}} with 1 entry:\n  1 => Dict(\"a\"=>2)\n\n\n\n\n\n","category":"method"},{"location":"#AdvancedLayoutCalculator.TextProcessor.getcd","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.getcd","text":"getcd\n\nAlias for getcountsdict\n\n\n\n\n\n","category":"function"},{"location":"#AdvancedLayoutCalculator.TextProcessor.getngrams-Tuple{AbstractString, Int64}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.getngrams","text":"getngrams(::String, ::Int)\n\nGet all n-grams up to n.\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> getngrams(\"heLo\", 4)\nDict{Int64, Dict{String, Int64}} with 4 entries:\n  4 => Dict(\"heLo\"=>1)\n  2 => Dict(\"Lo\"=>1, \"he\"=>1, \"eL\"=>1)\n  3 => Dict(\"heL\"=>1, \"eLo\"=>1)\n  1 => Dict(\"e\"=>1, \"o\"=>1, \"L\"=>1, \"h\"=>1)\n\n\n\n\n\n","category":"method"},{"location":"#AdvancedLayoutCalculator.TextProcessor.gett","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.gett","text":"gett\n\nAlias for gettotal\n\n\n\n\n\n","category":"function"},{"location":"#AdvancedLayoutCalculator.TextProcessor.to_pstring-Tuple{String}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.to_pstring","text":"to_pstring(::String)\n\nConverts String to PString. Currently only accounts for capital alphas.\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> p = to_pstring(\"helLo\")\nPString(Union{AbstractString, Symbol}[\"h\", \"e\", \"l\", :shift, \"l\", \"o\"])\n\njulia> to_string(p)\n\"helLo\"\n\n\n\n\n\n","category":"method"},{"location":"#AdvancedLayoutCalculator.TextProcessor.to_string-Tuple{AdvancedLayoutCalculator.TextProcessor.PString}","page":"Home","title":"AdvancedLayoutCalculator.TextProcessor.to_string","text":"to_string(::PString)\n\nConverts PString to String.\n\njulia> using AdvancedLayoutCalculator.TextProcessor\n\njulia> p = PString([\"1\", \"h\", :shift, \"p\"]);\n\njulia> q = to_string(p)\n\"1hP\"\n\njulia> to_pstring(q)\nPString(Union{AbstractString, Symbol}[\"1\", \"h\", :shift, \"p\"])\n\n\n\n\n\n","category":"method"}]
}
